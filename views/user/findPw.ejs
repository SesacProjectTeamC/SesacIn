<!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
     
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

      <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
      <link rel="stylesheet" href="views/componets/cdn.ejs">
      <link rel="stylesheet" href="views/styles/findPw.css">
      <link rel="stylesheet" href="views/styles/globalstyle.css">
    <link rel="icon" href="/static/img/favicon.ico" type="image/x-icon">

  </head>
  <body>
      <header>        
        <div>
          <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 20 20" class="bi-arrow-left" onclick="goBack()">
            <circle cx="10" cy="10" r="9.5" fill="transparent" class="hover-circle" />
            <path fill="black" fill-rule="evenodd" transform="translate(2, 2)" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
          </svg>
        </div>
      </header>
      <div class="content">
        <img src="/static/img/logo.png" alt="logo" class="logo" />
      <main>
        <h2>비밀번호 찾기</h2>

        <form name="findPw" id="form_findPw">
          <!-- 아이디 입력란 -->
          <div class="findPw_form_uId">
            <input type="text" class="findPw_form_uId" id="uId" name="uId" placeholder="아이디" required>
            <button type="button" class="btn btn-primary" onclick="emailVerified()">인증 여부</button>
          </div>
          <div class="caution" id="cautionId"></div>
          <br><br>
    
          <!-- 비밀번호 입력란 (기본적으로 숨김) -->
        <div class="findPw_form_password" style="display: none;">
          <input type="password" class="findPw_form_password" 
          pattern="^(?=.*[\W_])[A-Za-z\d\W_]{6,}$"
          title="비밀번호는 특수문자를 포함하여 6자 이상이어야 합니다." 
          id="pw" name="pw" placeholder="새 비밀번호" required oninput="checkPwFormat()">
          <div
            id="pwErrorMessage"
            class="alert alert-danger"
            style="display: none"
          ></div>
          <br>
          <br>
          <input type="password" class="findPw_form_password" 
          id="pwCheck" name="pwCheck" placeholder="새 비밀번호 확인" required>
          <div
            id="pwCheckErrorMessage"
            class="alert alert-danger"
            style="display: none"

          ></div>
          <br>
          <br>
          <button type="button" class="btn btn-primary" id='resetPassword' onclick="resetPasswordBtn()">비밀번호 재설정</button>
        </div>

    
          <!-- 이메일 입력란 (기본적으로 숨김) -->
          <div class="findPw_form_email" style="display: none;">
            <input type="email" class="findPw_form_email" id="email" name="email" placeholder="이메일" required>
            <button type="button" class="btn btn-primary" id='sendVerificationCodeBtn' onclick="sendVerificationCode()">인증 요청</button>
          </div>
          <!-- 이메일 인증 코드 입력란 (기본적으로 숨김) -->
          <div class="findPw_form_email_verification" style="display: none;">
            <input type="text" class="findPw_form_email_verification" id="verificationCode" name="verificationCode" placeholder="인증 코드" required>
            <button type="button" class="btn btn-primary" id='verifyEmailCodeBtn' onclick="verifyEmailCode()">인증 확인</button>
          </div>
          <br><br>
            
            <br>

            <div class="modal fade" id="cautionModal" tabindex="-1" aria-labelledby="cautionModalLabel" aria-hidden="true">
              <div class="modal-dialog">
              <div class="modal-content">
                  <div class="modal-header">
                  <h5 class="modal-title" id="cautionModalLabel">경고</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                  </button>
                  </div>
                  <div class="modal-body">
                  <p id="cautionText"></p>
                  </div>
                  <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">닫기</button>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </main>
      </div>
  </div>
    <script>

      //input 유효성 검사
      function checkFormValidity() {
        const form_findPw = document.forms['form_findPw'];
        const pwInput = form_findPw.pw;
        const pwCheckInput = form_findPw.pwCheck;
        const resetPassword = document.getElementById('resetPassword');



        // 각 입력 필드의 유효성 검사 결과를 가져옴
        const pwValid = pwInput.validity.valid;
        const pwCheckValid =
          pwCheckInput.validity.valid && pwCheckInput.value === pwInput.value;

        if ( pwValid && pwCheckValid ) {
          resetPassword.disabled = false;
        } else {
          resetPassword.disabled = true;
        }

      }
      const form_findPw = document.forms['form_findPw'];
      form_findPw.pw.addEventListener('input', checkFormValidity);
      form_findPw.pwCheck.addEventListener('input', checkFormValidity);


      // pw 필드 포커스가 벗어났을 때
      function checkPwFormat() {
        const pwInput = document.getElementById('pw');
        const pwErrorMessage = document.getElementById('pwErrorMessage');
        const pwCheckInput = document.getElementById('pwCheck');
        const pwCheckErrorMessage = document.getElementById('pwCheckErrorMessage');

        if (!pwInput.validity.valid) {
          // 형식이 올바르지 않은 경우 알림을 표시
          const errorMessage =
            '비밀번호는 특수문자를 포함하여 6자 이상이어야 합니다.';
          pwErrorMessage.textContent = errorMessage;
          pwErrorMessage.style.display = 'block';
        } else {
          // 형식이 올바른 경우 알림을 숨김
          pwErrorMessage.style.display = 'none';
        }
      }
      // 비밀번호 일치 여부
      const pwInput = document.getElementById('pw');
      const pwCheckInput = document.getElementById('pwCheck');
      const pwCheckErrorMessage = document.getElementById(
        'pwCheckErrorMessage'
      );


      function checkPasswordMatch() {
        if (pwInput.value !== pwCheckInput.value) {
          // 비밀번호가 일치하지 않는 경우 에러 메시지를 표시합니다.
          pwCheckErrorMessage.textContent = '비밀번호가 일치하지 않습니다.';
          pwCheckErrorMessage.style.display = 'block';
        } else {
          // 비밀번호가 일치하는 경우 에러 메시지를 숨깁니다.
          pwCheckErrorMessage.style.display = 'none';
        }
      }
      pwCheckInput.addEventListener('input', checkPasswordMatch);
      

      function setModalTextAndShow(message) {
        const modalText = document.getElementById('cautionText');
        modalText.textContent = message;

        // 모달 창 표시
        $('#cautionModal').modal('show');
      }

      function hideCaution() {
        const cautionName = document.getElementById('cautionName');
        const cautionEmail = document.getElementById('cautionEmail');

        cautionName.textContent = '';
        cautionEmail.textContent = '';
      }

      function emailVerified() {
        const uId = document.getElementById('uId').value;

        axios
          .post('/checkEmailVerify', { uId })
          .then((response) => {
            const isEmailVerified = response.data.isEmailVerified;

            if (isEmailVerified) {
              // 이메일이 인증된 경우, 비밀번호 입력란 표시
              showPasswordInput();
            } else {
              // 이메일이 인증되지 않은 경우, 이메일 입력란 표시
              showEmailInput();
            }
          })
          .catch((error) => {
            if (error.response.status === 404) {
              // 사용자가 없는 경우, 모달에 메시지 표시
              setModalTextAndShow('사용자를 찾을 수 없습니다.');
            } else {
              console.error('에러:', error);
            }
          });
      }

      function sendVerificationCode() {
        const emailInput = document.getElementById('email');
        const emailForm = document.querySelector('.findPw_form_email');
        const verificationCodeForm = document.querySelector('.findPw_form_email_verification');

        // 이메일을 서버로 보내 인증 코드를 요청
        axios
          .post('/email', { email: emailInput.value })
          .then((response) => {
            // 이메일을 성공적으로 보냈을 때, 인증 코드 입력란을 표시
            verificationCodeForm.style.display = 'block';
            // 이메일 입력란을 숨김
            emailForm.style.display = 'none';
          })
          .catch((error) => {
            console.error('에러:', error);
          });
      }

      function verifyEmailCode() {
        const verificationCodeInput = document.getElementById('verificationCode');

        axios({
          method: 'POST',
          url: `/verify`,
          data: {
            verificationCode: verificationCodeInput.value,
          },
        })
          .then((response) => {
            // 인증에 성공한 경우, 비밀번호 입력란을 표시하고 인증 코드 입력란을 숨김
            showPasswordInput();
          })
          .catch((error) => {
            const status = error.response.request.status;
            if (status === 401) {
              setModalTextAndShow('사용자를 찾을 수 없습니다.');
            } else if (status === 402) {
              setModalTextAndShow('인증 업데이트 중 오류가 발생했습니다.');
            } else if (status === 404) {
              setModalTextAndShow('인증에 실패하였습니다. 올바른 코드를 입력하세요.');
            } else {
              setModalTextAndShow('이메일 인증 도중 오류가 발생했습니다.');
            }
          });
      }






      function showPasswordInput() {
        // 비밀번호 입력란을 표시하고, 이메일 입력란을 숨깁니다.
        document.querySelector('.findPw_form_password').style.display = 'block';
        document.querySelector('.findPw_form_email').style.display = 'none';
        document.querySelector('.findPw_form_email_verification').style.display = 'none';
        
      }

      function showEmailInput() {
        // 이메일 입력란을 표시하고, 비밀번호 입력란을 숨깁니다.
        document.querySelector('.findPw_form_password').style.display = 'none';
        document.querySelector('.findPw_form_email').style.display = 'block';
      }




      function resetPasswordBtn() {
        const uId = document.getElementById('uId').value;
        const newPassword = document.getElementById('pw').value;

        axios({
          method: 'PATCH',
          url: `/pw`,
          data : {
            uId : uId,
            pw : newPassword
          },
        })
        .then((result) => {
          axios({
              method: 'GET',
              url: '/login',
            })
              .then(() => {
                document.location.href = '/login';
              })
              .catch((error) => {
                setModalTextAndShow('오류 발생. 다시 시도해주세요.');
                console.log(error);
              });
          })
          .catch((error) => {
            const status = error.response.request.status;
            if (status === 400) {
              setModalTextAndShow('입력 필드가 누락되었습니다.');
            } else if (status === 401) {
              setModalTextAndShow('사용자를 찾을 수 없습니다.');
            } else {
              setModalTextAndShow('비밀번호 재설정 중 오류가 발생했습니다.');
            }
          })
      }
    

          function goBack(){
        window.history.back();
      }
    </script>
  </body>
</html>